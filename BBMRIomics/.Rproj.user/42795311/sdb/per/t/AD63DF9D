{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Accessing the BIOS metadatabase\"\noutput: \n  html_document:\n    highlight: tango\n    toc: true\n    toc_float:\n      collapsed: false\nbibliography: BBMRIomics.bib\n---\n\n```{r, child=\"_setup.Rmd\"}\n```\n\nThe BIOS project has generated for over 4000 individuals\nRNA-sequencing and DNA methylation data. A part from these data, GoNL\nimputed genotypes were generated from existing genotypes and several\nphenotypes/demographic variables were collected for the same set of\nsamples. A highly flexible sample-oriented metadatabase (MDb) was\ncreated in order to manage the dynamic generation of this large-scale\nmultiple-omic data set.\n\nThe MDb is a non-relation database (http://couchdb.apache.org/) that\nuses JSON to store records and JavaScript for querying. Furthermore,\nit has an HTTP API suitable to programmatically access the database\nfrom the GRID, e.g, the bios alignment pipeline.\n\nEach record or document is a sample (individual) within the BIOS\nproject and has a unique identifier. \n\n***UPDATE REQUIRED*** Each document has a predefined structure\naccording to our database schema\n(https://git.lumc.nl/rp3/bios-schema). Custom Python scripts are use\nto update or modify the database (https://git.lumc.nl/rp3/bios-mdb).\n\nAccess to the metadatabase (MDb) is restricted; please contact (Leon\nMei or Maarten van Iterson).\n\n## Description of MDb content ##\n\nThe MDb contains as much as meta-information as possible from all\nsamples and datatypes: location of (raw) data on srm, md5 checksum\nverification, quality control information, links between the different\nidentifiers used (person_id, dna_id, etc) and phenotype information.\n\nEvery sample's meta information is encoded in a CouchDB document. Each\ndocument has a unique identifier (the bios_id) which is biobankname\n(CODAM, LL, LLS, NTR, RS and PAN) concatenated with person_id\nseparated by a \"-\", e.g. CODAM-2001. This unique bios_id is not\nsuitable for use in the public domain, e.g., EGA upload, therefore a\nunique non-identifiable identifier has been created for each\nindividual; the uuid.\n\nEvery update of a sample in the database is recorded by increasing a\nrevision number. Therefore it is always possible to undo wrong\nupdates.\n\n## Description available views ##\n\nViews are the way to extract information from the couchDb. Views are\norganized into designs; each design contains a number of views related\nto a particular kind of information that can be extracted from the\nMDb. For example, there is a design `EGA` which contains currently two\nviews 1) `freeze1RNASeq` to extract those samples for which RNAseq\ndata has been uploaded to EGA and 2) `freeze1Methylation` for the DNA\nmethylation data. \n\nOther relevant views are: \n\ndesign:      view: \n------------ --------------------------------------------------------------------\nIdentifiers  Ids, Relations \nPhenotypes   Phenotypes\nRNA          Fastq, RNARuns, RNASamplesheet \nDNAm         Idat, DNAmRuns, DNAmSamplesheet\nDNA          Imputations\nEGA          freeze1RNA, freeze1DNAm, freeze2RNA, freeze2DNAm\n\n> Note: We can always add views if necessary; please contact Maarten van Iterson.\n\n## Accessing the MDb ##\n\nViews can be downloaded as JSON documents by making a GET\nrequest. Most programming languages have utilities for making GET\nrequests and to transform JSON documents. Some programming languages\nhave an API for CouchDB e.g. JAVA and Python. There are several online\ntools available for transforming JSON documents to csv files. \n\n***UPDATE REQUIRED*** couchdb with _list-function to transform directly to csv\n\n```{r, eval=FALSE}\nhead(getView(\"getIds\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\nhead(getView(\"Phenotypes\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\nhead(getView(\"Fastq\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\nhead(getView(\"Idat\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\nhead(getView(\"getIds\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\nhead(getView(\"getIds\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\nhead(getView(\"getIds\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB))\n\n\n```\n\n\n### Access the metadatabase using R ###\n\nBBMRIomics uses a configuration file to read in your MDb username and\npassword, so that you do not have to type it every time you use the\nMDb.\n\nCreate a file called `.bbmriomics` (`.biosrutils` is also a valid name)\nand stored it in your home directory on the VM (/home/username) and\nadd e.g.:\n\n```{bash, eval=FALSE}\nusrpwdrp3: 'rp3_username:password' \nusrpwdrp4: 'rp4_username:password'\nproxy:  /tmp/your_proxy\n```\n\nThe first line contains your username and password for the RP3\ndatabase. The latter two can be optionally for accessing the RP4\ndatabase and accessing data from SRM using the function `SRM2VM`.\n\nOn loading the **BBMRIomics** library your username and password will\nbe set in the variable `RP3_MDB_USRPWD`. The `getView`-function can\nnow be used like this:\n\n<!-- # ```{r} -->\n<!-- HD dd 2017-03-17 17:58 : Set \"eval=FALSE\" as otherwise upon \"Knit\"ting this *.Rmd file, R Markdown will issue: -->\n<!-- ==== -->\n<!-- Error: lexical error: invalid char in json text. -->\n<!--                                       /home/hhmdraisma/R/x86_64-pc-lin -->\n<!--                      (right here) ------^ -->\n<!-- Execution halted -->\n<!-- ==== -->\n<!-- ... and in the <R> console, running this chunk will yield: -->\n<!-- ==== -->\n<!-- > ids <- getView(\"getIds\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB) -->\n<!-- No username and password provided for the MDB use stored views! -->\n<!-- Error: lexical error: invalid char in json text. -->\n<!--                                       /home/hhmdraisma/R/x86_64-pc-lin -->\n<!--                      (right here) ------^ -->\n<!-- ==== -->\n```{r, eval=FALSE}\nids <- getView(\"getIds\", usrpwd=RP3_MDB_USRPWD, url=RP3_MDB)\n```\n\nAlso, access to the RNAseq run database (if you requested an account)\nis possible through the `BBMRIomics::getView()` function.\n\n\n<!-- ```{r} -->\n<!-- # ```{r} -->\n<!-- HD dd 2017-03-17 18:02 : Set \"eval=FALSE\" as otherwise upon \"Knit\"ting this *.Rmd file, R Markdown will issue: -->\n<!-- ==== -->\n<!-- Error: lexical error: invalid char in json text. -->\n<!--                                       /home/hhmdraisma/R/x86_64-pc-lin -->\n<!--                      (right here) ------^ -->\n<!-- Execution halted -->\n<!-- ==== -->\n<!-- ... and in the <R> console, running this chunk will yield: -->\n<!-- ==== -->\n<!-- > stats <- getView(\"getStats\", usrpwd=RP3_MDB_USRPWD, url=RP3_RDB) -->\n<!-- No username and password provided for the MDB use stored views! -->\n<!-- Error: lexical error: invalid char in json text. -->\n<!--                                       /home/hhmdraisma/R/x86_64-pc-lin -->\n<!--                      (right here) ------^ -->\n<!-- ==== -->\n```{r, eval=FALSE}\nstats <- getView(\"getStats\", usrpwd=RP3_MDB_USRPWD, url=RP3_RDB)\n```\n\n\n## Putting data in the MDb ##\n\n***UPDATE REQUIRED*** \n\nCurrently, the are R and python scripts available, however, I'm\nlooking into [couchdbapp](https://github.com/couchapp/couchapp) a\npython interface that is specifically design to update/views etc.\n\n",
    "created" : 1489765229148.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2912517027",
    "id" : "AD63DF9D",
    "lastKnownWriteTime" : 1489770182,
    "last_content_update" : 1489770182607,
    "path" : "~/HumGen/I/lab-j/hhmdraisma/Projects/BBMRIomics/site_package/metadatabase.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}